I want a python project. now please understand the requirement, and make sure we are on the same page. don't implement now

Script2Scene Requirements Specification

Overview
Python script that converts a CSV file and config file into a structured scenes.json file for video/presentation generation.

Input Files
1. CSV File (scenes.csv)
Required Columns:
* text:
    * For text scenes: Sentence text (supports <h> tags for highlighting)
    * For image scenes: TTS script for audio narration (optional)
    * For video scenes: not needed
* mode (required for new scenes):
    * append_center: Text appears in center
    * append_top: Text appears at top
    * all: Show all text at once
    * all_with_highlight: Show all text with highlighting
    * video: Video scene
    * image: Image scene
* background:
    * For text/image scenes: Background image or color
    * For video scenes: the video filename
* highlight_color: Reqired only for the first row of "all_with_highlight" mode.
* highlight_bold: Reqired only for the first row of "all_with_highlight" mode.
* highlight_italic: Reqired only for the first row of "all_with_highlight" mode.
* font_size: Optional for text scenes. If not specified, use the value in config.json as default
* font_color: Optional for text scenes. If not specified, use the value in config.json as default
* para_spacing: Optional for text scenes. If not specified, use config.json as default value
* line_spacing: Optional for text scenes. If not specified, use config.json as default value
* v_padding: Optional for text scenes. If not specified, use config.json as default value
* h_padding: Optional for text scenes. If not specified, use config.json as default value
* valign: Optional for text scenes. If not specified, use config.json as default value
* dub: Optional for text scenes. If specified, this will appear in the output json in the text scene at the same level of the "text" attr
* wrap: Optional for text scenes. If not specified, use config.json as default value

Optional Columns:
* ttf: Font file name
* alignment: Text alignment (center, left, right)
* tts: TTS engine. If not specified, use config.json as default value.
* voice: Voice name. If not specified, use config.json as default value.
* speed: Speech speed
* duration: image/video scenes only
* pregap
* postgap
* Repeating Same Text Supports:
  "tts" column can specify multiple tts engine names in diffrent lines, meaning reading once by that tts engine.
  For example, if "tts" contains three lines, the output "tts" attr will have an array of three items.
  each line can optinally provide an pregap by using a decimal number followed by a ','(comma) before the engine name.
  For example, "2.2,eleven" means the text should be read by eleven engine after 2.2 secs of silence.
  If there is no comma, then it means no gap. Therefore, the first line cannot have comma, otherwise error out.
  The seconds of gap will become "pregap" in the "tts" output json.
  For each row, the line number of voice and speed must match the line number of the tts column.
  and the same line of these three columns mean a combination of a tts engine setting.

2. Config File (config.json)
Required Fields:

json
{
  "screen_size": [width, height],
  "font": {
    "ttf": "default_font.ttf",
    "size": 48,
    "color": "#FFFFFF"
  },
  "tts": {
    "tts_engine": "default_engine",
    "voice": "default_voice"
  },
  "para_spacing": 30,
  "line_spacing": 5,
  "v_padding": 40,
  "h_padding": 40
}

Optional Fields:
json
{
  "fps": 24,
  "bgm": {
    "file": "background.mp3",
    "volume": 0.5,
    "start": 0
  }
}

Scene Splitting Rules
1. A new scene starts when the mode value if specified
2. Consecutive rows without mode specified inherit the previous row and grouped into one scene
3. The first row of a new mode defines scene-level properties (background, font, tts, line_spacing, etc.)
5. When mode changes, font/TTS settings reset to config defaults if not specified in the first row of the new mode

Output Scene Types
1. Text Scene
json
{
  "type": "text",
  "mode": "append_center",
  "background": "bg1.jpg",  // OR "bgcolor": "#FFFFFF"
  "line_spacing": 20, // from config.json or specified in csv file
  "para_spacing": 20, // from config.json or specified in csv file
  "h_padding": 40, // from config.json or specified in csv file.
  "v_padding": 40, // from config.json or specified in csv file.
  "valign": "top", // from csv file. valid values are "top", "center", "bottom"
  "text": [
    {
      "text": "Hi <h>there</h>",
      "dub": "Hi there",
      "font": {
        "file": "roboto_regular.ttf",
        "size": 54,
        "color": "#27AE60"
      },
      "wrap": True,
      "halign": "center",
      "tts": [{ // an array. multiple number of objects means repeating
        "tts_engine": "edge-tts",
        "voice": "en-US-AriaNeural",
        "speed": 0.9
      },
      {
        "pregap": 1.2 //optional, comes from tts col
       "tts_engine": "edge-tts",
        "voice": "en-US-AriaNeural",
        "speed": 1.0
      }],
      "pregap": 1.0,  //optional
      "postgap": 2.1  //optional
    }
  ]
}
NOte: don't output halign if empty
Note: for "all_with_highlight" mode, it must have 'highlight_style' attribute with
{
  "font_color": "string", // value comes from 'highlight_color'
  "bold": "boolean", // value comes from 'highlight_bold'
  "italic": "boolean" // value comes from 'highlight_italic'
}

2. Image Scene

json
{
  "type": "image",
  "file": "pic1.jpg", // OR "bgcolor": "#FFFFFF"
  "duration": 5.0, // optional from csv
  "pregap": 1.0,  //optional
  "postgap": 2.1  //optional
  "audio": {
    "tts": {
      "text": "Welcome to our presentation",  // This comes from the 'text' column in CSV
      "tts_engine": "edge-tts",
      "voice": "en-US-JennyNeural",
      "speed": 0.9
    }
  }
}
Note:
* Duration is required
* The file field contains the image filename from 'background' field in csv
* The text column in CSV contains the TTS script for narration

3. Video Scene
json
{
  "type": "video",
  "file": "detailed_explanation.mp4",  // This comes from the 'background' column in CSV
  "duration": 15, //optional
  "pregap": 1.0,  //optional
  "postgap": 2.1  //optional
}

Background Field Rules
* Starts with #: Interpreted as background color
* Does not start with #: Interpreted as image file path
* Conflicting specifications should error out

Error Handling
The script should fail fast with clear error messages for:
* Missing required columns (text, mode)
* Invalid mode values
* Conflicting background specifications
Validation
* No file existence validation (images, videos, fonts, BGM)
* Text array elements maintain CSV row order within each scene
* If "tts" format error should error out
* If line number of tts, voice, speed don't match, error out

Output
* Single scenes.json file
* Default location: workspace/${project_name}/
* Configurable via CLI arguments
* Output json should include screen_size, fps, bgm from input config. If fps is not specified, default to 30.

CLI Usage
bash
python script2scene.py ${project_name} [--input-csv=script.csv] [--config=config.json] [--output=scenes.json]
Default Behaviors
* Default CSV input: workspace/${project_name}/script.csv
* Default config: workspace/${project_name}/config.json
* Default output: workspace/${project_name}/scenes.json

