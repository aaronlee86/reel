I want a python project. now please understand the requirement, and make sure we are on the same page. don't implement now

Template2Script Requirements Specification

Overview
Python script that converts a txt file into a csv file and config.json.

cover
bgm


Input Files
1. CSV File (scenes.csv)
Required Columns:
* text:
    * For text scenes: Sentence text (supports <h> tags for highlighting)
    * For image scenes: TTS script for audio narration (optional)
    * For video scenes: not needed
* mode (required for new scenes):
    * append_center: Text appears in center
    * append_top: Text appears at top
    * all: Show all text at once
    * all_with_highlight: Show all text with highlighting
    * video: Video scene
    * image: Image scene
* background:
    * For text/image scenes: Background image or color
    * For video scenes: the video filename
* highlight_color: Reqired only for the first row of "all_with_highlight" mode.
* highlight_bold: Reqired only for the first row of "all_with_highlight" mode.
* highlight_italic: Reqired only for the first row of "all_with_highlight" mode.
* font_size: Optional for text scenes. If not specified, use the value in config.json as default
* font_color: Optional for text scenes. If not specified, use the value in config.json as default
* line_spacing: Optional for text scenes. If not specified, use config.json as default value

Optional Columns:
* ttf: Font file name
* alignment: Text alignment (center, left, right)
* tts: TTS engine (default: "edge-tts")
* voice: Voice name (default: "zh-TW-HsiaoChenNeural")
* speed: Speech speed (default: 1.0)
* duration: image/video scenes only

2. Config File (config.json)
Required Fields:

json
{
  "screen_size": [width, height],
  "font": {
    "ttf": "default_font.ttf",
    "size": 48,
    "color": "#FFFFFF"
  },
  "tts": {
    "tts_engine": "default_engine",
    "voice": "default_voice"
  },
  "line_spacing": 30
}

Optional Fields:
json
{
  "fps": 24,
  "bgm": {
    "file": "background.mp3",
    "volume": 0.5,
    "start": 0
  }
}

Scene Splitting Rules
1. A new scene starts when the mode value if specified
2. Consecutive rows without mode specified inherit the previous row and grouped into one scene
3. The first row of a new mode defines scene-level properties (background, font, tts, line_spacing, etc.)
5. When mode changes, font/TTS settings reset to config defaults if not specified in the first row of the new mode

Output Scene Types
1. Text Scene
json
{
  "type": "text",
  "mode": "append_center",
  "background": "bg1.jpg",  // OR "bgcolor": "#FFFFFF"
  "line_spacing": 20, // from config.json or specified in csv file
  "text": [
    {
      "text": "Hi <h>there</h>",
      "font": {
        "file": "roboto_regular.ttf",
        "size": 54,
        "color": "#27AE60"
      },
      "halign": "center",
      "tts": {
        "tts_engine": "edge-tts",
        "voice": "en-US-AriaNeural",
        "speed": 0.9
      }
    }
  ]
}
Note: No duration field for text scenes
NOte: don't output halign if empty
Note: for "all_with_highlight" mode, it must have 'highlight_style' attribute with
{
  "font_color": "string", // value comes from 'highlight_color'
  "bold": "boolean", // value comes from 'highlight_bold'
  "italic": "boolean" // value comes from 'highlight_italic'
}

2. Image Scene

json
{
  "type": "image",
  "file": "pic1.jpg", // OR "bgcolor": "#FFFFFF"
  "duration": 5.0, // optional from csv
  "audio": {
    "tts": {
      "text": "Welcome to our presentation",  // This comes from the 'text' column in CSV
      "tts_engine": "edge-tts",
      "voice": "en-US-JennyNeural",
      "speed": 0.9
    }
  }
}
Note:
* Duration is required
* The file field contains the image filename from 'background' field in csv
* The text column in CSV contains the TTS script for narration

3. Video Scene
json
{
  "type": "video",
  "file": "detailed_explanation.mp4",  // This comes from the 'background' column in CSV
  "duration": 15
}
Note:
* Duration is optional

Background Field Rules
* Starts with #: Interpreted as background color
* Does not start with #: Interpreted as image file path
* Conflicting specifications should error out

Error Handling
The script should fail fast with clear error messages for:
* Missing required columns (text, mode)
* Invalid mode values
* Conflicting background specifications
Validation
* No file existence validation (images, videos, fonts, BGM)
* Text array elements maintain CSV row order within each scene

Output
* Single scenes.json file
* Default location: workspace/${project_name}/
* Configurable via CLI arguments
* Output json should include screen_size, fps, bgm from input config. If fps is not specified, default to 30.

CLI Usage
bash
python script2scene.py ${project_name} [--input-csv=script.csv] [--config=config.json] [--output=scenes.json]
Default Behaviors
* Default CSV input: workspace/${project_name}/script.csv
* Default config: workspace/${project_name}/config.json
* Default output: workspace/${project_name}/scenes.json

